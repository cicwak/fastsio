"""
–ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤—Å–µ–º–∏ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
- ContextVar-based Dependency Injection
- Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è
- AsyncAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import threading
import time
from dataclasses import dataclass
from typing import Dict, Optional

from fastsio import Server, SocketID, Data, Depends, register_dependency
from pydantic import BaseModel


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dataclass
class AppConfig:
    max_connections: int = 100
    allow_anonymous: bool = True
    message_rate_limit: int = 10  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class JoinRoomMessage(BaseModel):
    room: str
    password: Optional[str] = None


class SendMessage(BaseModel):
    room: str
    message: str
    timestamp: Optional[float] = None


class UserProfile(BaseModel):
    user_id: str
    username: str
    email: str


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–∏ –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã)
app_config = AppConfig(max_connections=50, allow_anonymous=True)
fake_database: Dict[str, UserProfile] = {
    "user1": UserProfile(user_id="user1", username="alice", email="alice@example.com"),
    "user2": UserProfile(user_id="user2", username="bob", email="bob@example.com"),
}
message_cache: Dict[str, list] = {}
connection_count = 0
connection_lock = threading.Lock()


# –§–∞–±—Ä–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def get_config() -> AppConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return app_config


def get_database():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (mock)."""
    print("üîå Getting database connection")
    return fake_database


def get_cache():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à (mock)."""
    print("üì¶ Getting cache connection")
    return message_cache


def get_user_service(db=Depends(get_database)):
    """–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ë–î."""
    class UserService:
        def __init__(self, db):
            self.db = db
        
        def get_user(self, user_id: str) -> Optional[UserProfile]:
            return self.db.get(user_id)
        
        def user_exists(self, user_id: str) -> bool:
            return user_id in self.db
    
    return UserService(db)


def get_room_service(cache=Depends(get_cache)):
    """–°–µ—Ä–≤–∏—Å –∫–æ–º–Ω–∞—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    class RoomService:
        def __init__(self, cache):
            self.cache = cache
            self.rooms: Dict[str, set] = {}
        
        def join_room(self, room: str, user_id: str):
            if room not in self.rooms:
                self.rooms[room] = set()
            self.rooms[room].add(user_id)
            
            # –ö–µ—à–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
            if room not in self.cache:
                self.cache[room] = []
        
        def leave_room(self, room: str, user_id: str):
            if room in self.rooms:
                self.rooms[room].discard(user_id)
                if not self.rooms[room]:
                    del self.rooms[room]
        
        def get_room_members(self, room: str) -> set:
            return self.rooms.get(room, set())
        
        def add_message(self, room: str, message: str, user: str):
            if room not in self.cache:
                self.cache[room] = []
            self.cache[room].append({
                "message": message,
                "user": user,
                "timestamp": time.time()
            })
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.cache[room]) > 100:
                self.cache[room] = self.cache[room][-100:]
    
    return RoomService(cache)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
register_dependency("config", get_config)
register_dependency("database", get_database)


# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å AsyncAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
sio = Server(
    asyncapi={
        "enabled": True,
        "title": "Sync Chat Server API",
        "version": "1.0.0",
        "description": "–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–Ω–∞—Ç, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ dependency injection",
        "servers": {
            "development": {
                "host": "localhost:5000",
                "protocol": "socketio",
                "description": "Development server"
            }
        }
    }
)


@sio.event
def connect(
    sid: SocketID,
    config: AppConfig = Depends(get_config),
    user_service=Depends(get_user_service)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤."""
    global connection_count
    
    print(f"üîó Client {sid} attempting to connect...")
    
    with connection_lock:
        if connection_count >= config.max_connections:
            print(f"‚ùå Connection limit reached for {sid}")
            return False
        
        if not config.allow_anonymous:
            print(f"‚ùå Anonymous connections not allowed for {sid}")
            return False
        
        connection_count += 1
        print(f"‚úÖ Client {sid} connected successfully. Total: {connection_count}")
        return True


@sio.event
def disconnect(sid: SocketID):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
    global connection_count
    
    with connection_lock:
        connection_count -= 1
        print(f"üëã Client {sid} disconnected. Total: {connection_count}")


@sio.on("join_room")
def join_room(
    sid: SocketID,
    data: JoinRoomMessage,
    server: Server,
    room_service=Depends(get_room_service),
    user_service=Depends(get_user_service)
):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    print(f"üè† {sid} wants to join room: {data.room}")
    
    # Mock user ID (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    user_id = f"user_{sid[:8]}"
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    room_service.join_room(data.room, user_id)
    server.enter_room(sid, data.room)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
    members = room_service.get_room_members(data.room)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
    server.emit(
        "user_joined",
        {
            "user_id": user_id,
            "room": data.room,
            "members_count": len(members)
        },
        room=data.room
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    server.emit("joined_room", {
        "room": data.room,
        "members_count": len(members),
        "status": "success"
    }, to=sid)


@sio.on("send_message")
def send_message(
    sid: SocketID,
    data: SendMessage,
    server: Server,
    user_service=Depends(get_user_service),
    room_service=Depends(get_room_service),
    config: AppConfig = Depends("config")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    print(f"üí¨ {sid} sending message to {data.room}: {data.message}")
    
    # Mock user ID
    user_id = f"user_{sid[:8]}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = user_service.get_user(user_id)
    username = user.username if user else f"Anonymous_{sid[:8]}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    room_service.add_message(data.room, data.message, username)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
    server.emit(
        "new_message",
        {
            "room": data.room,
            "message": data.message,
            "user_id": user_id,
            "username": username,
            "timestamp": data.timestamp or time.time()
        },
        room=data.room
    )


@sio.on("get_profile")
def get_profile(
    sid: SocketID,
    data: Data,
    server: Server,
    user_service=Depends(get_user_service)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not isinstance(data, dict) or "user_id" not in data:
        server.emit("error", {"message": "user_id required"}, to=sid)
        return
    
    user_id = data["user_id"]
    user = user_service.get_user(user_id)
    
    if user:
        server.emit("profile", user.dict(), to=sid)
    else:
        server.emit("error", {"message": "User not found"}, to=sid)


@sio.on("get_room_history")
def get_room_history(
    sid: SocketID,
    data: Data,
    server: Server,
    room_service=Depends(get_room_service)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–Ω–∞—Ç—ã."""
    if not isinstance(data, dict) or "room" not in data:
        server.emit("error", {"message": "room required"}, to=sid)
        return
    
    room = data["room"]
    cache = room_service.cache
    
    history = cache.get(room, [])
    server.emit("room_history", {
        "room": room,
        "messages": history[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    }, to=sid)


@sio.on("get_stats")
def get_stats(
    sid: SocketID,
    server: Server,
    config: AppConfig = Depends(get_config)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞."""
    server.emit("stats", {
        "connected_clients": connection_count,
        "max_connections": config.max_connections,
        "server_type": "synchronous",
        "features": [
            "ContextVar DI",
            "Pydantic Validation", 
            "AsyncAPI Documentation",
            "Custom Dependencies"
        ]
    }, to=sid)


if __name__ == "__main__":
    print("üöÄ Starting Synchronous SocketIO Server with Full Features...")
    print("üìö Available events:")
    print("  - join_room: Join a chat room")
    print("  - send_message: Send message to room")
    print("  - get_profile: Get user profile")
    print("  - get_room_history: Get room message history")
    print("  - get_stats: Get server statistics")
    print("\nüîß Features:")
    print("  - ‚úÖ ContextVar-based dependency injection")
    print("  - ‚úÖ Pydantic model validation")
    print("  - ‚úÖ AsyncAPI documentation")
    print("  - ‚úÖ Custom dependencies with Depends()")
    print("  - ‚úÖ Global dependency registration")
    print("  - ‚úÖ Thread-safe operations")
    print("  - ‚úÖ Room management")
    print("  - ‚úÖ Message history")
    print("  - ‚úÖ Connection limits")
    
    print("\nüìñ AsyncAPI Documentation:")
    print(f"  - JSON: {sio.asyncapi_config.url}")
    print(f"  - UI: {sio.asyncapi_config.ui_url}")
    
    print("\n‚ö†Ô∏è  To run this server, integrate it with a web framework:")
    print("  from fastsio import WSGIApp")
    print("  app = WSGIApp(sio)")
    print("  # Then run with gunicorn or similar WSGI server")
    print("\n  Example with eventlet:")
    print("  import eventlet")
    print("  import eventlet.wsgi")
    print("  eventlet.wsgi.server(eventlet.listen(('', 5000)), app)")
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å AsyncAPI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"\nüîß Server configuration:")
    print(f"  Max connections: {app_config.max_connections}")
    print(f"  Allow anonymous: {app_config.allow_anonymous}")
    print(f"  Message rate limit: {app_config.message_rate_limit}/min")
    print(f"  AsyncAPI enabled: {sio.asyncapi_config.enabled}")
    print(f"  AsyncAPI title: {sio.asyncapi_config.title}")
